#!/system/bin/sh
#
# A simple Samsung services disabler by Ian Macdonald.
#
# Use this to prime your device after installing TWRP.

patch_block() {
    echo " - Disabling encryption and recovery restoration..."
    bxhsed --quiet $1 '/vendor/recovery-from-boot.p|/vendor/recovery-from-bsod.p' 'fileencryption=|notencryptable='
    ret=$?
    if [ "$ret" -gt "0" ]; then
        echo " -    Success... (${ret})"
    elif [ "$ret" -eq "0" ]; then
        echo " -    Already disabled..."
    else
        echo " -    Failed! (exit code: ${ret})"
    fi
}

fsck() {
    fsck.f2fs -f -y $1
    if [ "$?" != "0" ]; then
        echo " - Error: Failed to run fsck!"
    fi
}

umount_vendor() {
  echo " - Unmounting vendor..."
  path=$1
  if mount | grep -q ${path}; then
    umount ${path} &>/dev/null
    if mount | grep -q ${path}; then
      echo " -   Unmount failed. Continue..."
      return 1
    fi
  fi
}

mount_vendor() {
  echo " - Mounting vendor..."
  block=$1
  path=$2
  if mount | grep -q ${path}; then
    umount ${path} &>/dev/null
  fi
  if ! mount | grep -q ${path}; then
    mount -o ro ${block} ${path} &>/dev/null
    if ! mount | grep -q ${path}; then
      echo " -   Mount failed. Aborting..."
      return 1
    fi
  else
    echo " -   Device or resource busy..."
    return 1
  fi
}

echo " "
echo "Multi-disabler for Samsung devices"
echo "running ReadOnly F2FS Vendor Images."
echo " "

os=$(getprop ro.build.version.release)
major=${os%%.*}
bl=$(getprop ro.boot.bootloader)
dp=$(getprop ro.boot.dynamic_partitions)

# Firmware version starts at either 8th or 9th character, depending on length
# of bootloader string (12 or 13).
#
fw=${bl:$((${#bl} - 4)):4}
bn=${bl:$((${#bl} - 6)):2}

# Device is first 5 characters of bootloader string.
#
device=${bl:0:$((${#bl} - 8))}
mft=$(getprop ro.product.manufacturer | tr '[A-Z]' '[a-z]')

if [ "$mft" != samsung ]; then
  echo " - Device appears not to be made by Samsung."
  fatal=true
elif [ -z "$device" ]; then
  echo " - Could not determine device model."
  fatal=true
elif [ $major -lt 9 ]; then
  echo " - This software is incompatible with Android $major."
  fatal=true
fi
if [ -n "$fatal" ]; then
  echo " - Installation aborted."
  echo " "
  exit 1
fi

echo " - Detected a SM-${device} device with a ${fw} (${bn}) bootloader."
echo " - The environment appears to be Android ${major}"
echo " "

mkdir -p /tmp/vendor
dm_block=/dev/block/mapper/vendor

umount_vendor "/vendor"
lptools unmap vendor
lptools map vendor
mount_vendor "${dm_block}" "/tmp/vendor" || exit 1

if ! mount | grep "/tmp/vendor" | grep -qs "f2fs"; then
  echo " - Vendor isn't f2fs, abort..."
  umount_vendor "/tmp/vendor" || exit 0
  rm -rf "/tmp/vendor"
  exit 0
fi

if [ ! -e "${dm_block}" ]; then
  echo " - Error: Could not determine vendor block..."
  exit 1
fi
echo " - Detected vendor at ${dm_block}"

if grep -qs "/vendor/recovery-from-boot.p" /tmp/vendor/bin/install-recovery.sh || grep -qs "fileencryption=" /tmp/vendor/etc/fstab.*; then
  run=true
fi

umount_vendor "/tmp/vendor" || exit 1

if [ "$run" == "true" ]; then
  patch_block $dm_block
  fsck $dm_block
else
  echo " - Nothing to do!"
fi

sync
rm -rf /tmp/vendor

echo " "
echo " - Finished."
echo " "
